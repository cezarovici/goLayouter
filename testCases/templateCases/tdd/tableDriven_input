{{define "tableDriven" -}}
package {{.Package}}

import (
	"testing"
)

func Test{{.ObjectName}}(t *testing.T) {
	type inputType struct {
		// complete with your input type
	}

	type outputType struct {
		// complete with your output type
	}

	type testCase struct {
		description    string
		input          inputType
		expectedOutput outputType
	}

	testCases := []testCase{
		{
			description: "test case 1",
			input:       inputType{
				// complete with input data for test case 1
			},
			expectedOutput: outputType{
				// complete with expected output data for test case 1
			},
		},
		{
			description: "test case 2",
			input:       inputType{
				// complete with input data for test case 2
			},
			expectedOutput: outputType{
				// complete with expected output data for test case 2
			},
		},
		{
			description: "test case 3",
			input:       inputType{
				// complete with input data for test case 3
			},
			expectedOutput: outputType{
				// complete with expected output data for test case 3
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			// call the function being tested with tc.input and store the actual output in result
			// result := /* funcName(tc.input) */

			// compare the actual output with the expected output for this test case
			// assert.Equal(t, tc.expectedOutput, result)
		})
	}
}
{{end}}